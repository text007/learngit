
# 位运算符：对其二进制运算
'''
&	按位与：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
|	按位或：只要对应的二个二进位有一个为1时，结果位就为1,否则为0
^	按位异或：当两对应的二进位相异时，结果为1,否则为0
~	按位取反：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1
<<	左移动：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
>>	右移动：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数
'''

a = 60      # 60 = 0011 1100
b = 13      # 13 = 0000 1101
c = 0

# &	按位与:11=1,10=0
c = a & b   # 12 = 0000 1100
print('a & b = ', c)

# |	按位或:10=1,11=1,00=0
c = a | b   # 61 = 0011 1101
print('a | b = ', c)

# ^	按位异或:10=1,11=0,00=0
c = a ^ b   # 49 = 0011 0001
print('a ^ b', c)

# ~	按位取反:0=1,1=0
c = ~a      # -61 = 1100 0011
print('~a = ', c)

# << 左移动:左移动n
c = a << 2  # 240 = 1111 0000
print('a << 2', c)

# >> 右移动：右移动n
c = a >> 2  # 15 = 0000 1111
print('a >> 2 =', c)
